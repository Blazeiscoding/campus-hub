// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole{
  ADMIN
  STUDENT
  FACULTY
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password_hash String
  role          UserRole
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  api_keys      ApiKey[]
  courses       Course[]
  results       Result[]
  materials     Material[]
  enrollments   Enrollment[]
  notifications Notification[]
  events        Event[]
  announcements Announcement[]

  @@map("users")
}

model ApiKey {
  id         String    @id @default(cuid())
  api_key    String    @unique
  created_at DateTime  @default(now())
  expires_at DateTime?
  revoked    Boolean   @default(false)
  user_id    String

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Course {
  id                String   @id @default(cuid())
  code              String   @unique
  name              String
  description       String?
  faculty_id        String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  last_modified_by  String

  // Relations
  faculty           User         @relation(fields: [faculty_id], references: [id])
  materials         Material[]
  results           Result[]
  enrollments       Enrollment[]
  events            Event[]

  @@map("courses")
}

model Material {
  id           String   @id @default(cuid())
  course_id    String
  uploaded_by  String
  title        String
  description  String?
  file_url     String
  uploaded_at  DateTime @default(now())

  // Relations
  course       Course @relation(fields: [course_id], references: [id], onDelete: Cascade)
  uploader     User   @relation(fields: [uploaded_by], references: [id])

  @@map("materials")
}

model Result {
  id               String    @id @default(cuid())
  grade            String
  published_at     DateTime?
  last_modified_by String
  course_id        String
  student_id       String
  published_by     String

  // Relations
  course           Course @relation(fields: [course_id], references: [id], onDelete: Cascade)
  student          User   @relation(fields: [student_id], references: [id])

  @@map("results")
}

model Enrollment {
  id          String   @id @default(cuid())
  course_id   String
  student_id  String
  enrolled_at DateTime @default(now())
  event_id    String?

  // Relations
  course      Course @relation(fields: [course_id], references: [id], onDelete: Cascade)
  student     User   @relation(fields: [student_id], references: [id], onDelete: Cascade)
  event       Event? @relation(fields: [event_id], references: [id])

  @@unique([course_id, student_id])
  @@map("enrollments")
}

model Announcement {
  id               String   @id @default(cuid())
  title            String
  content          String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  last_modified_by String
  created_by       String

  // Relations
  creator          User @relation(fields: [created_by], references: [id])

  @@map("announcements")
}

model Notification {
  id           String   @id @default(cuid())
  user_id      String
  type         String
  reference_id String?
  message      String
  read         Boolean  @default(false)
  created_at   DateTime @default(now())

  // Relations
  user         User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Event {
  id          String   @id @default(cuid())
  created_by  String
  title       String
  description String?
  start_time  DateTime
  end_time    DateTime
  created_at  DateTime @default(now())

  // Relations
  creator     User         @relation(fields: [created_by], references: [id])
  enrollments Enrollment[]

  @@map("events")
  Course Course[]
}
